main, 	input 
		store dividend

		input 
		store divisor

		jns division_calculator

		/ output quotient
		load quotient
		output

		/ output remainder
		load remainder
		output

		halt

/ dividend and divisor must contain numbers to be divided
division_calculator,	hex 0
						/ initialise variables
						clear
						store negative
						store remainder
						store quotient

						/ make a copy of dividend
						load dividend
						store dvd_copy

						/ if divisor = 0, halt
						load divisor
						skipcond 400
						jump start_division
						halt
 
start_division, 	jns check_quotient_sign / determine sign of quotient

					/ calculate abs(dividend) / abs(divisor)
					jns make_dvd_pos
					jns make_dvs_pos
					jns perform_absolute_division

					/ add sign to quotient
					jns add_sign_to_quotient

					/ if remainder = 0, return to main
					load remainder
					skipcond 800
					jumpi division_calculator / remainder = 0 => return to main

					/ else, make adjustments to quotient and remainder
					load negative
					skipcond 800
					jump deal_with_positive_quotient / negative > 0 => quotient is positive
					jump deal_with_negative_quotient / quotient is negative
					
add_sign_to_quotient,	hex 0
						/ check if sign of quotient is negative (negative = 1)
						load negative
						skipcond 800
						jumpi add_sign_to_quotient

						/ quotient = - quotient
						load zero
						subt quotient
						store quotient

						jumpi add_sign_to_quotient

deal_with_positive_quotient,	clear
								/ check if original dividend was negative.
								/ if yes, absolute division gives correct answer.
								load dvd_copy
								skipcond 000
								jumpi division_calculator / return to main
								
								/ quotient + 1
								load quotient
								add one
								store quotient
								
								/ remainder = divisor - remainder
								load divisor
								subt remainder
								store remainder
								
								jumpi division_calculator / return to main
                    
deal_with_negative_quotient, 	clear
								/ if original dividend < 0, 
								load dvd_copy
								skipcond 000 / original dividend > 0
								jumpi division_calculator / return to main

								/ quotient --
								load quotient
								subt one
								store quotient

								/ remainder = divisor - remainder
								load divisor
								subt remainder
								store remainder

								jumpi division_calculator / return to main
                 
check_quotient_sign,	hex 0
						load dividend
						skipcond 000
						jump check_sign_given_dvd_pos / do if a >= 0
						
						/ if dividend < 0, check if divisor < 0
						load divisor 
						skipcond 000
						jump set_neg_true / a < 0 and b > 0
						jumpi check_quotient_sign / a < 0 and b < 0

check_sign_given_dvd_pos,   	load divisor 
            					Skipcond 000
            					jumpi check_quotient_sign / a >= 0 and b >= 0
                                jump set_neg_true / a >= 0 and b < 0

/ negative = 1 and returns to main
set_neg_true, 	load one
				store negative
                jumpi check_quotient_sign

make_dvd_pos, 	hex 0
				load dividend
				Skipcond 000
                jumpi make_dvd_pos
                
                / dividend = - dividend
				load zero
				subt dividend
        		store dividend
                
                jumpi make_dvd_pos
                
make_dvs_pos, 	hex 0
				load divisor
				Skipcond 000
                jumpi make_dvs_pos
                
                / divisor = - divisor
				load zero
				subt divisor
        		store divisor
                
                jumpi make_dvs_pos
  
perform_absolute_division, hex 0
while_loop, load dividend
			subt divisor
			add one

			/ check if dividend - divisor >= 0 (or > -1)
			Skipcond 800
			jump end_while_loop
	
			/ dividend -= divisor
			subt one
			store dividend
			
			/ quotient += 1
			load quotient	
			add one
			store quotient
			
			jump while_loop

end_while_loop,	subt one / remove the extra one added when checking if loop should end
				add divisor
				store remainder / remainder is guaranteed to be >= 0  
				jumpi perform_absolute_division / end loop if acc < 0

negative, dec 0 / boolean. if 1, quotient must be negative. else, quotient positive.
one, dec 1 / constant
zero, dec 0 / constant
remainder, dec 0
quotient, dec 0
dividend, dec 0
dvd_copy, dec 0
divisor, dec 0